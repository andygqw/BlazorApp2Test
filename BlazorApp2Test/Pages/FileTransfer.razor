@page "/filetransfer"

@using Microsoft.AspNetCore.Components.Forms
@using BlazorApp2Test.Pages
@using BlazorApp2Test.FileAccess
@using Blazored.Modal
@using System
@using Amazon.S3.Model

@inject ErrorService _errorService
@inject FileAccesses _file
@inject UserService _userService
@inject RenderService _renderService

@inherits Component

@implements IDisposable

<PageTitle>GWTool - File</PageTitle>


@if (_userService.GetAuth())
{
    <div class="row px-4">
        <div class="col-12 col-sm-6 col-md-8 py-2">
            <p class="section-name">File Transfer</p>
        </div>
    </div>

    <div class="mx-4 pb-3 rounded">

        <div class="rounded py-3 ps-2">
            <InputFile OnChange="HandleSelection" multiple />
            <button class="rounded" @onclick="Upload" disabled="@(!fileSelected)">Upload</button>
        </div>

        <div class="ps-2">

            @if (isUploadSuccess && selectedFiles != null)
            {
                <p class="text-success">Uploaded successfully.</p>
            }
            <div class="mt-4 mb-3 ps-2 py-1 pb-2 bg-light rounded">

                @if (fileList != null && fileList.Count > 0)
                {
                    <p class="pt-2">Current downloadable files (@fileList.Count()):</p>
                    @foreach (var file in fileList)
                    {
                        <p>
                            <a href="@GetDownloadLink(file.Key)" target="_blank">@file.Key</a> <label>@_file.GetFileSize(file.Size)</label>
                            <button class="rounded" @onclick="() => ShowDeleteConfirmation(file.Key)">delete @file.Key</button>
                        </p>
                    }

                    <button class="my-3 mx-1 rounded" @onclick="DeleteAll">Delete All</button>
                }
                else
                {
                    <p class="pt-2">Currently no downloadable files on server</p>
                }
            </div>
            Note that if newly uploaded file name is duplicated with a file on server, old file will be overwritten by new one.
        </div>
    </div>
}
else
{
    <div class="section-sub-title text-center mt-4">
        @Helper.MSG_NOPERMISSION
    </div>
}

<!-- Modal -->
<div class="modal" id="deleteConfirmationModal" style="@($"display: {(DeleteConfirm ? "block" : "none")}")">
   <div class="modal-content text-center fw-bold flex-grow">
      <span class="close" @onclick="CloseModal">&times;</span>
      <div class="mb-2 mx-4">
            @if(isDeleteAll)
            {
                <div>Do you really want to delete all files?</div>
            }
            else
            {
                <div>Do you really want to delete @aimed_file ?</div>
            }
        </div>
      <div>
         <button class="btn btn-secondary rounded-2" @onclick="@CloseModal">Cancel</button>
            <button class="btn btn-danger" @onclick="isDeleteAll ? ConfirmDeleteAll : ConfirmDelete">Delete</button>
      </div>
            
   </div>
</div>

<Loading IsLoading="@isLoading" />


@code {
    private List<S3Object>? fileList;
    private IReadOnlyList<IBrowserFile>? selectedFiles;
    private bool fileSelected = false;
    private string? aimed_file = null;


    private bool DeleteConfirm = false;
    private bool DupConfirm = false;
    private bool isDeleteAll = false;
    private bool isUploadSuccess = false;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = false;
        _renderService.OnEventTriggered += () => RefreshPage();
        await GetFiles();
    }

    private async Task GetFiles()
    {
        try
        {
            if (_userService.GetAuth())
            {
                fileList = await _file.ListUserFilesAsync();
            }

        }
        catch(Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private string GetDownloadLink(string fileName)
    {
        return _file.GeneratePreSignedURL(fileName);
    }

    private void HandleSelection(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        if (selectedFiles != null && selectedFiles.Count() > 0)
        {
            fileSelected = true;
        }
        else
        {
            _errorService.ShowModal("Selected file doesn't exist");
        }
    }

    private async Task Upload()
    {
        try
        {
            fileSelected = false;

            if (selectedFiles == null || selectedFiles.Count() <= 0)
            {
                throw new Exception("Something wrong with file selection");
            }

            // Calculate the number of files stored
            int curNum = 0;
            if(fileList != null) curNum = fileList.Count();

            if(curNum + selectedFiles.Count() > Helper.MaxFileUpload){

                throw new Exception("You uploaded more files than maximum number of files limit(" + Helper.MaxFileUpload + " files)");
            }

            isLoading = true;

            foreach (var file in selectedFiles)
            {
                if(file.Size > Helper.FileMaxSize){

                    throw new IOException("Selected file exceeds limit of " + Helper.FileMaxSize / (1024 * 1024) + "MB");
                }

                if (file.Size == 0)
                {
                    throw new IOException("Something wrong uploading file to the server: 0 byte");
                }

                using var stream = file.OpenReadStream(Helper.FileMaxSize);
                await _file.UploadFile(stream, file.Name);
            }

            isUploadSuccess = true;
            await GetFiles();
            RefreshPage();
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            isUploadSuccess = false;
            _errorService.ShowModal(ex.Message);
        }
    }

    private void ShowDeleteConfirmation(string fName)
    {
        aimed_file = fName;
        DeleteConfirm = true;
    }

    private void DeleteAll()
    {
        isDeleteAll = true;
        DeleteConfirm = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (aimed_file == null)
            {
                throw new Exception("File aimed failed");
            }
            CloseModal();
            isLoading = true;
            await _file.DeleteFile(aimed_file);
            await GetFiles();
            RefreshPage();
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            _errorService.ShowModal(ex.Message);
        }
    }

    private async Task ConfirmDeleteAll()
    {
        try
        {
            CloseModal();
            isLoading = true;
            aimed_file = null;
            await _file.DeleteAllFiles();
            await GetFiles();
            RefreshPage();
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            _errorService.ShowModal(ex.Message);
        }
    }

    private void CloseModal()
    {
        DeleteConfirm = false;
        DupConfirm = false;
    }

    public void Dispose()
    {
        _renderService.OnEventTriggered -= () => RefreshPage();
    }
}