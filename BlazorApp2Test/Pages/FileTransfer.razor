@page "/filetransfer"

@using Microsoft.AspNetCore.Components.Forms
@using BlazorApp2Test.FileAccess
@using BlazorApp2Test.Pages
@using Blazored.Modal
@using System

@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment

@inherits Component

<PageTitle>GWTool - File Transfer</PageTitle>


<div class="row px-4">
    <div class="col-12 col-sm-6 col-md-8 py-2">
        <p class="section-name">File Transfer</p>
    </div>
</div>

<div class="mx-4 pb-3 rounded">

    <div class="rounded py-3 ps-2">
        <InputFile OnChange="HandleSelection" />
        <button class="rounded" @onclick="Upload" disabled="@(!fileSelected)">Upload</button>
    </div>

    <div class="ps-2">
        @if (_file != null)
        {
            @if (_file.Error != null)
            {
                <p class="text-danger">@_file.Error</p>
            }

            @if (_file.IsUploaded)
            {
                <p class="text-success">@_file.FileName uploaded successfully.</p>
            }
        }
        <div class="mt-4 mb-3 ps-2 py-1 pb-2 bg-light rounded">

            <p class="pt-2">Current downloadable files:</p>

            @foreach (var file in Directory.GetFiles(Helper.UploadFolderPath))
            {
                //NOTE: In Helper, @fileName is added to DownloadPath
                var fileName = Path.GetFileName(file);
                <p>
                    <a href="UploadFile/@fileName" download>@fileName</a>
                    <button class="rounded" @onclick="() => ShowDeleteConfirmation(fileName)">delete @fileName</button>
                </p>
            }

            <button class="my-3 mx-1 rounded" @onclick="DeleteAll">Delete All</button>

        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal" id="deleteConfirmationModal" style="@($"display: {(DeleteConfirm ? "block" : "none")}")">
   <div class="modal-content text-center fw-bold flex-grow">
      <span class="close" @onclick="CloseModal">&times;</span>
      <div class="mb-2 mx-4">
            @if(aimed_file == Helper.FileTransfer_DeleteAll)
            {
                <div>Do you really want to delete all files?</div>
            }
            else
            {
                <div>Do you really want to delete @aimed_file ?</div>
            }
        </div>
      <div>
         <button class="btn btn-secondary" @onclick="@CloseModal">Cancel</button>
         <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
      </div>
            
   </div>
</div>

<div class="modal" id="fileNameDupModal" style="@($"display: {(DupConfirm ? "block" : "none")}")">
   <div class="modal-content text-center fw-bold">
      <span class="close" @onclick="CloseModal">&times;</span>
      <div class="mb-2 mx-4">
            File @(selectedFile?.Name ?? "unknown") already exists, do you want to replace it?
      </div>
      <div>
            <button class="btn btn-secondary" @onclick="DupHandler">No</button>
            <button class="btn btn-danger" @onclick="RepHandler">Yes</button>
      </div>
   </div>
</div>



@code {

    private IBrowserFile? selectedFile;
    private bool fileSelected = false;
    private string? aimed_file;

    // new file obj instance
    private FileAccess _file = new FileAccess();


    private bool DeleteConfirm = false;
    private bool DupConfirm = false;

    void HandleSelection(InputFileChangeEventArgs e)
    {
        _file = new FileAccess();
        selectedFile = e.File;
        if (selectedFile != null)
        {
            fileSelected = true;
        }
    }

    private async Task Upload()
    {
        foreach (var f in Directory.GetFiles(Helper.UploadFolderPath))
        {
            if (Path.GetFileName(f) == selectedFile.Name)
            {
                DupConfirm = true;
                return;
            }
        }

        await _file.UploadFile(selectedFile, true);
        fileSelected = false;
    }

    private async Task DupHandler()
    {
        await _file.UploadFile(selectedFile, false);
        CloseModal();
        fileSelected = false;
    }

    private async Task RepHandler()
    {
        _file.DeleteFile(selectedFile.Name);
        await _file.UploadFile(selectedFile, true);
        CloseModal();
        fileSelected = false;
    }

    private void DeleteHandler(string f)
    {
        _file.DeleteFile(f);
    }

    private async void DeleteAll()
    {
        ShowDeleteConfirmation(Helper.FileTransfer_DeleteAll);
    }

    private void ShowDeleteConfirmation(string f)
    {
        aimed_file = f;
        DeleteConfirm = true;
    }

    private void ConfirmDelete()
    {
        if (aimed_file == Helper.FileTransfer_DeleteAll)
        {
            foreach (var file in Directory.GetFiles(Helper.UploadFolderPath))
            {
                _file.DeleteFile(Path.GetFileName(file));
            }
        }
        else
        {
            DeleteHandler(aimed_file);
        }
        CloseModal();
        aimed_file = null;
    }

    private void CloseModal()
    {
        DeleteConfirm = false;
        DupConfirm = false;
    }
}
