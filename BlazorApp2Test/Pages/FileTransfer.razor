@page "/filetransfer"

@using Microsoft.AspNetCore.Components.Forms
@using BlazorApp2Test.Pages
@using BlazorApp2Test.FileAccess
@using Blazored.Modal
@using System

@inject ErrorService _errorService
@inject FileAccesses _file
@inject UserService _userService
@inject RenderService _renderService

@inherits Component

@implements IDisposable

<PageTitle>GWTool - File</PageTitle>



@if (_userService.GetAuth())
{
    <div class="row px-4">
        <div class="col-12 col-sm-6 col-md-8 py-2">
            <p class="section-name">File Transfer</p>
        </div>
    </div>

    <div class="mx-4 pb-3 rounded">

        <div class="rounded py-3 ps-2">
            <InputFile OnChange="HandleSelection" />
            <button class="rounded" @onclick="Upload" disabled="@(!fileSelected)">Upload</button>
        </div>

        <div class="ps-2">

            @if (isUploadSuccess && selectedFile != null)
            {
                <p class="text-success">@selectedFile.Name uploaded successfully.</p>
            }
            <div class="mt-4 mb-3 ps-2 py-1 pb-2 bg-light rounded">

                @if (fileList != null && fileList.Count > 0)
                {
                    <p class="pt-2">Current downloadable files:</p>
                    @foreach (var file in fileList)
                    {
                        @if (file != Helper.WebConfigFile)
                        {
                            <p>
                                <a href="UploadFile/@file" download>@file</a> <label>@_file.GetFileSize(file)</label>
                                <button class="rounded" @onclick="() => ShowDeleteConfirmation(file)">delete @file</button>
                            </p>
                        }
                    }

                    <button class="my-3 mx-1 rounded" @onclick="DeleteAll">Delete All</button>
                }
                else
                {
                    <p class="pt-2">Currently no downloadable files on server</p>
                }
            </div>
            If browser can't find file, try click <a href=@Helper.UploadFolder>here</a>.
        </div>
    </div>
}
else
{
    <div class="section-sub-title text-center mt-4">
        You do not have access to this page, try log in.
    </div>
}

<!-- Modal -->
<div class="modal" id="deleteConfirmationModal" style="@($"display: {(DeleteConfirm ? "block" : "none")}")">
   <div class="modal-content text-center fw-bold flex-grow">
      <span class="close" @onclick="CloseModal">&times;</span>
      <div class="mb-2 mx-4">
            @if(isDeleteAll)
            {
                <div>Do you really want to delete all files?</div>
            }
            else
            {
                <div>Do you really want to delete @aimed_file ?</div>
            }
        </div>
      <div>
         <button class="btn btn-secondary rounded-2" @onclick="@CloseModal">Cancel</button>
            <button class="btn btn-danger" @onclick="isDeleteAll ? ConfirmDeleteAll : ConfirmDelete">Delete</button>
      </div>
            
   </div>
</div>

<div class="modal" id="fileNameDupModal" style="@($"display: {(DupConfirm ? "block" : "none")}")">
   <div class="modal-content text-center fw-bold">
      <span class="close" @onclick="CloseModal">&times;</span>
      <div class="mb-2 mx-4">
            File @(selectedFile?.Name ?? "unknown") already exists, do you want to replace it?
      </div>
      <div>
            <button class="btn btn-secondary rounded-2" @onclick="DupHandler">No</button>
            <button class="btn btn-danger" @onclick="RepHandler">Yes</button>
      </div>
   </div>
</div>

@code {
    private List<string>? fileList;
    private IBrowserFile? selectedFile;
    private bool fileSelected = false;
    private string? aimed_file = null;


    private bool DeleteConfirm = false;
    private bool DupConfirm = false;
    private bool isDeleteAll = false;
    private bool isUploadSuccess = false;


    protected override Task OnInitializedAsync()
    {
        _renderService.OnEventTriggered += () => RefreshPage();
        GetFiles();
        return base.OnInitializedAsync();
    }

    private void GetFiles()
    {
        try
        {
            if (_userService.GetAuth())
            {
                fileList = _file.GetAllFileNames(_userService.GetUserId());
            }

        }
        catch(Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private void HandleSelection(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            fileSelected = true;
        }
        else
        {
            _errorService.ShowModal("Selected file doesn't exist");
        }
    }

    private async Task Upload()
    {
        try
        {
            fileSelected = false;

            if (selectedFile == null)
            {
                throw new Exception("Something wrong with file selection");
            }

            //TODO:
            foreach (var f in Directory.GetFiles(Helper.UploadFolderPath))
            {
                if (Path.GetFileName(f) == selectedFile.Name)
                {
                    DupConfirm = true;
                    return;
                }
            }

            if(await _file.UploadFile(selectedFile, true) == Helper.ReturnGood)
            {
                isUploadSuccess = true;
                GetFiles();
                RefreshPage();
            }
            else
            {
                isUploadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _errorService.ShowModal(ex.InnerException?.Message);
        }
    }

    private async Task DupHandler()
    {
        try
        {
            if (selectedFile == null)
            {
                throw new Exception("Something wrong with file selection");
            }

            CloseModal();
            await _file.UploadFile(selectedFile, false);
            fileSelected = false;
            GetFiles();
            RefreshPage();

        }catch(Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private async Task RepHandler()
    {
        try
        {
            if (selectedFile == null)
            {
                throw new Exception("Something wrong with file selection");
            }
            CloseModal();
            _file.DeleteFile(selectedFile.Name);
            await _file.UploadFile(selectedFile, true);
            fileSelected = false;
            GetFiles();
            RefreshPage();

        }catch(Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private void ShowDeleteConfirmation(string fName)
    {
        aimed_file = fName;
        DeleteConfirm = true;
    }

    private void DeleteAll()
    {
        isDeleteAll = true;
        DeleteConfirm = true;
    }

    private void ConfirmDelete()
    {
        try
        {
            if (aimed_file == null)
            {
                throw new Exception("File aimed failed");
            }
            CloseModal();
            _file.DeleteFile(aimed_file);
            GetFiles();
            RefreshPage();
        }
        catch (Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private void ConfirmDeleteAll()
    {
        try
        {
            CloseModal();
            aimed_file = null;
            _file.DeleteAllFiles();
            GetFiles();
            RefreshPage();
        }
        catch (Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private void CloseModal()
    {
        DeleteConfirm = false;
        DupConfirm = false;
    }

    public void Dispose()
    {
        _renderService.OnEventTriggered -= () => RefreshPage();
    }
}