@page "/kiskis"

<PageTitle>GWTool - Kiskis</PageTitle>

@using BlazorApp2Test.Data
@using BlazorApp2Test.Models
@using BlazorApp2Test.Pages
@using System

@inject IJSRuntime JSRuntime
@inject MemoData _memoData
@inject ReplyData _replyData
@inject NavigationManager Navigation
@inject ErrorService _errorService
@inject UserService _userService
@inject RenderService _renderService

@inherits Component

@implements IDisposable

<PageTitle>GWTool - KisKis</PageTitle>

@if (_userService.GetAuth())
{
    <div class="col-12 my-5">

        <div class="flex-container mb-4">
            <button class="btn btn-primary" @onclick="(_ => showAddModal = true)">
                Add A Memo
            </button>
        </div>

        @if (memoList.Count > 0)
        {
            <div class="memo-container">
                <!-- Add this row container outside the loop -->
                @foreach (var m in memoList)
                {
                    <div class="memo-card m-3">

                        @if (m.Image != null)
                        {
                            <img class="memo-img p-4" style="cursor: pointer;" src="@m.Image" @onclick="@(() => ShowImg(m.Image))" />
                        }

                        <div class="memo-content p-4">
                            <div class="flex-grow-1 d-flex align-items-center text-white">
                                <div>
                                    <div class="section-sub-title">
                                        @m.Name
                                    </div>

                                    @if (m.Description != null)
                                    {
                                        <pre class="section-text mt-2 text-white">@m.Description</pre>
                                    }
                                </div>
                            </div>
                            <div class="text-white font-weight-bold">
                                @if (m.Replies.Count != 0)
                                {
                                    foreach (var r in m.Replies)
                                    {
                                        if (r.ReplyId == null)
                                        {
                                            <p @onclick="() => ReplyToReplyHandler(r)">@r.CreatedBy replied: @r.Content</p>
                                        }
                                        else
                                        {
                                            <p @onclick="() => ReplyToReplyHandler(r)">@r.CreatedBy replied to @r.RepliedBy: @r.Content</p>
                                        }
                                    }
                                }
                            </div>
                            <div class="memo-info">
                                <div class="pt-2">
                                    @m.Time by @m.CreatedBy
                                </div>
                                <div>
                                    <button class="btn btn-clear text-black" @onclick="() => AddReplyHandler(m.Id)">
                                        reply
                                    </button>
                                    <button class="btn btn-clear text-black" @onclick="(() => DeleteHandler(m))">
                                        delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="section-sub-title text-center">
                这里空空如也哦！<br>
                试着添加一个留言吧！
            </div>
        }
    </div>
}
else
{
    <div class="section-sub-title text-center mt-4">
        You do not have access to this page, try log in.
    </div>
}

<div class="memo-modal" id="addModal" style="@($"display: {(showAddModal ? "block" : "none")}")">
    <div class="memo-modal-content text-center fw-bold">
        <span class="close" @onclick="CloseModal">&times;</span>
        <EditForm Model="newMemo" OnValidSubmit="SubmitHandler">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="col-12">
                <div class="form-group">
                    <label for="name">Title</label>
                    <InputText id="name" @bind-Value="newMemo.Name" class="form-control" />
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">
                    <label for="description">Main body</label>
                    <InputTextArea id="description" @bind-Value="newMemo.Description" class="form-control" style="height:300px;" />
                </div>
            </div>
            <div class="col-12 mb-3 d-flex flex-column justify-content-center align-items-center">
                <label for="img">Upload an image</label>

                <div class="my-2">
                    <InputFile id="img" @ref="inputFile" OnChange="@ShowPreview" />
                </div>
                <img style="max-width:200px;max-height:200px" @ref="previewImageElem" />
            </div>

            <button class="btn btn-secondary" @onclick="@CloseModal">Cancel</button>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

<div class="modal" style="@($"display: {(showImgModal ? "block" : "none")}")" @onclick="CloseModal">
    <img src="@currentImg" class="modal-img" />
</div>

<div class="modal" style="@($"display: {(showDeleteModal ? "block" : "none")}")">
    <div class="modal-content text-center fw-bold">
        <span class="close" @onclick="CloseModal">&times;</span>
        <div class="mb-2 mx-4">
            Do you really want to delete this memo?<br />
            This can't be undo.
        </div>

        <div>
            <button class="btn btn-secondary rounded-2" @onclick="@CloseModal">Cancel</button>
            <button @onclick="DeleteMemo" class="btn btn-danger">Yes</button>
        </div>
    </div>
</div>

<div class="modal" style="@($"display: {(showReplyModal ? "block" : "none")}")">
    <div class="modal-content text-center fw-bold">
        <span class="close" @onclick="CloseModal">&times;</span>
        <EditForm Model="newReply" OnValidSubmit="AddReply">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="col-12">
                <div class="form-group">
                    <label for="name">Reply:</label>
                    <InputText @bind-Value="newReply.Content" class="form-control" />
                </div>
            </div>

            <button class="btn btn-secondary" @onclick="@CloseModal">Cancel</button>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {

    private List<MemoModel> memoList = new List<MemoModel>();

    private MemoModel newMemo = new MemoModel();

    private ReplyModel newReply = new ReplyModel();

    //Modal switch
    private bool showAddModal = false;
    private bool showImgModal = false;
    private bool showDeleteModal = false;
    private bool showReplyModal = false;

    //File upload and img preview:
    private IBrowserFile? selectedFile;
    private InputFile? inputFile;
    private ElementReference previewImageElem;

    // Image preview
    private string? currentImg;

    protected override async Task OnInitializedAsync()
    {
        _renderService.OnEventTriggered += () => RefreshPage();
        await LoadData();
        newMemo = new MemoModel();
    }

    private async Task LoadData()
    {
        try
        {
            if (_userService.GetAuth())
            {
                memoList = await _memoData.LoadMemos();
            }
        }
        catch (Exception ex)
        {
            _errorService.ShowModal("Load memos error: " + ex.Message);
        }
    }

    private async Task SubmitHandler()
    {
        try
        {
            if (selectedFile != null)
            {
                //NOTE: potential error - if image name exists

                await _memoData.SaveMemoImage(selectedFile);
                newMemo.Image = Helper.MemoImgget + '\\' + selectedFile.Name;
            }
            newMemo.Time = DateTime.Now;

            await _memoData.SaveMemo(newMemo);
            memoList = await _memoData.LoadMemos();

        }
        catch (Exception ex)
        {
            _errorService.ShowModal("Save memos error: " + ex.Message);
        }

        CloseModal();
    }

    private void DeleteHandler(MemoModel memo)
    {
        try
        {
            if (memo.UserId != _userService.GetUserId())
            {
                throw new Exception("You don't have permission to delete memos don't belong to you.");
            }
            newMemo = memo;
            showDeleteModal = true;

        }catch(Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private async Task DeleteMemo()
    {
        try
        {
            await _memoData.DeleteMemo(newMemo);
        }
        catch (Exception ex)
        {
            _errorService.ShowModal("Delete memos error: " + ex.Message);
        }
        finally
        {
            CloseModal();
            await Task.Run(() => LoadData());
        }
    }

    #region Reply features
    private void AddReplyHandler(int memoId)
    {
        newReply = new ReplyModel();
        newReply.MemoId = memoId;
        newReply.UserId = _userService.GetUserId();
        showReplyModal = true;
    }

    private async Task AddReply()
    {
        try
        {
            await _replyData.AddReply(newReply);
            memoList = await _memoData.LoadMemos();
        }
        catch (Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
        finally
        {
            CloseModal();
        }
    }

    private void ReplyToReplyHandler(ReplyModel model)
    {
        newReply = new ReplyModel();
        newReply.UserId = _userService.GetUserId();
        newReply.MemoId = model.MemoId;
        newReply.ReplyId = model.Id;
        showReplyModal = true;
    }
    #endregion Reply features

    private async Task ShowPreview(InputFileChangeEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("previewImage", inputFile!.Element, previewImageElem);
        selectedFile = e.File;
    }

    private void ShowImg(string ImgUrl)
    {
        showImgModal = true;
        currentImg = ImgUrl;
    }

    private void ShowModal()
    {
        showAddModal = true;
    }

    private void CloseModal()
    {
        newMemo = new MemoModel();
        currentImg = "";
        selectedFile = null;
        showAddModal = false;
        showImgModal = false;
        showDeleteModal = false;
        showReplyModal = false;
    }

    public void Dispose()
    {
        _renderService.OnEventTriggered -= () => RefreshPage();
    }
}