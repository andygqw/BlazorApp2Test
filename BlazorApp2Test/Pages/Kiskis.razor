@page "/kiskis"

<PageTitle>GWTool - Kiskis</PageTitle>

@using BlazorApp2Test.Data
@using BlazorApp2Test.Models
@using BlazorApp2Test.Pages
@using System

@inject IJSRuntime JSRuntime
@inject MemoData _memoData
@inject NavigationManager Navigation


<div class="col-12 my-5">

   <div class="flex-container mb-4">
       <button class="btn btn-primary" @onclick="(_ => showAddModal = true)">
           Add A Memo
       </button>
    </div>

    @if (memoList.Count > 0)
    {
        <div class="memo-container">
            <!-- Add this row container outside the loop -->
            @foreach (var m in memoList)
            {
                <div class="memo-card m-3">
                    
                    @if (m.Image != null)
                    {
                        <img class="memo-img p-4 m-2" style="cursor: pointer;" src="@m.Image" @onclick="@(() => ShowImg(m.Image))"/>

                        <div style="flex: 1; justify-content: center;">
                            <div class="flex-grow-1 d-flex align-items-center text-white">
                                <div>
                                    <div class="section-sub-title">
                                        @m.Name
                                    </div>

                                    @if (m.Description != null)
                                    {
                                        <div class="section-text mt-2">
                                            @m.Description
                                        </div>
                                    }
                                </div>
                            </div>
                            <div>
                                @m.Time
                            </div>
                        </div>
                    }
                    else
                    {
                        <div style="flex: none;" class="align-items-center m-2 p-4">
                            <div class="flex-grow-1 d-flex align-items-center text-white">
                                <div>
                                    <div class="section-sub-title">
                                        @m.Name
                                    </div>

                                    @if (m.Description != null)
                                    {
                                        <div class="section-text mt-2">
                                            @m.Description
                                        </div>
                                    }
                                </div>
                            </div>
                            <div>
                                @m.Time
                            </div>
                        </div>
                    }

                     
                </div>
            }
        </div>
    }
    else
    {
        <div class="section-sub-title text-center">
            这里空空如也哦！<br>
            试着添加一个留言吧！
        </div>
    }
</div>

@if(ErrMsg != null)
{
    <div class="alert-danger">@ErrMsg</div>
}

<div class="memo-modal" id="addModal" style="@($"display: {(showAddModal ? "block" : "none")}")">
    <div class="memo-modal-content text-center fw-bold">
        <span class="close" @onclick="CloseModal">&times;</span>
        <EditForm Model="newMemo" OnValidSubmit="SubmitHandler">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="col-12">
                <div class="form-group">
                    <label for="name">Title</label>
                    <InputText id="name" @bind-Value="newMemo.Name" class="form-control" />
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">
                    <label for="description">Main body</label>
                    <InputTextArea id="description" @bind-Value="newMemo.Description" class="form-control" style="height:300px;" />
                </div>
            </div>
            <div class="col-12 mb-3 d-flex flex-column justify-content-center align-items-center">
                <label for="img">Upload an image</label>

                <div class="my-2">
                    <InputFile id="img" @ref="inputFile" OnChange="@ShowPreview" />
                </div>
                <img style="max-width:200px;max-height:200px" @ref="previewImageElem" />
            </div>
            
            <button class="btn btn-secondary" @onclick="@CloseModal">Cancel</button>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

<div class="modal" style="@($"display: {(showImgModal ? "block" : "none")}")" @onclick="CloseModal">
    <img src="@currentImg"class="modal-img"/>
</div>

@code {

    private List<MemoModel> memoList = new List<MemoModel>();

    private MemoModel newMemo = new MemoModel();

    //Modal switch
    private bool showAddModal = false;
    private bool showImgModal = false;

    //File upload and img preview:
    private IBrowserFile? selectedFile;
    private InputFile? inputFile;
    private ElementReference previewImageElem;

    // Image preview
    private string currentImg;

    private string ErrMsg;

    protected override async Task OnInitializedAsync()
    {
        memoList = await _memoData.LoadMemos();
        newMemo = new MemoModel();
    }

    private async Task SubmitHandler()
    {
        try
        {
            if (selectedFile != null)
            {
                
                // Determine the path to save the file
                var path = Path.Combine(Helper.MemoImgset, selectedFile.Name);
                newMemo.Image = Path.Combine(Helper.MemoImgget, selectedFile.Name);

                // Save the file to the server's local folder
                await using FileStream fs = new(path, FileMode.Create);
             
                await selectedFile.OpenReadStream(selectedFile.Size).CopyToAsync(fs);

                fs.Close();
            }
            newMemo.Time = DateTime.Now;

            await _memoData.SaveMemo(newMemo);
            memoList = await _memoData.LoadMemos();

        }catch(Exception ex)
        {
            ErrMsg = ex.Message;
        }

        CloseModal();
    }

    private async Task ShowPreview(InputFileChangeEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("previewImage", inputFile!.Element, previewImageElem);
        selectedFile = e.File;
    }

    private void ShowImg(string ImgUrl)
    {
        showImgModal = true;
        currentImg = ImgUrl;

    }

    private void ShowModal()
    {
        showAddModal = true;
    }

    private void CloseModal()
    {
        newMemo = new MemoModel();
        currentImg = "";
        showAddModal = false;
        showImgModal = false;
    }
}