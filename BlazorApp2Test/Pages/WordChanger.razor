@page "/wordchanger"

@using System.Text.RegularExpressions;
@using BlazorApp2Test.Data;
@using BlazorApp2Test.Models;


@inject IJSRuntime JSRuntime
@inject ErrorService _errorService
@inject NavigationManager NavigationManager

@inherits Component

<PageTitle>GWTool - Word</PageTitle>


<div class="row px-4">
    <div class="col-12 col-sm-6 col-md-8 py-2">
        <p class="section-name">Word Manipulator</p>
    </div>
</div>

<div class="mx-4 pb-3">
    
    <EditForm Model="@searchModel" OnValidSubmit="@Change">

        <InputTextArea rows="8" class="mb-3 pb-3 form-control rounded bg-light" @bind-Value="@searchModel.Content"
        @oninput="HandleInput" placeholder="enter content" maxlength="@Helper.TextAreaMaxLength"></InputTextArea>
        <InputText class="rounded bg-light" @bind-Value="searchModel.WordWas" placeholder="enter changin word" /> 
        <InputText class="rounded bg-light" @bind-Value="searchModel.WordWill" placeholder="enter word going to be" />


        <div class="my-3 form-check form-switch rounded">
            <label class="form-check-label px-2 me-5 move-left rounded bg-light" for="flexSwitchCheckChecked">Case Sensitive</label>
            <input class="form-check-input" type="checkbox" @bind-value="searchModel.CaseSensitive" checked>
            <label style="color:@wordCountColor;">
                Word Count: @wordCount/@Helper.TextMaxLength
            </label>
            <label style="color:@charCountColor;">
                Character Count: @charCount/@Helper.TextAreaMaxLength
            </label>
        </div>

        <button class="rounded" type="submit" disabled="@disableSubmit">Submit</button>

        <button class="rounded" @onclick="Clean">Clear</button>

    </EditForm>



    @if(result != null)
    {
        <div class="mt-4 mb-2 bg-light rounded">

            <div class="px-3 py-2 pt-3">
                <textArea rows="8" class="form-control rounded" readonly type="text" value="@result" />
                <div class="mt-2">
                    @if (copied == true)
                    {
                        <button type="button" class="rounded btn-secondary-active" color="green" @onclick="CopyTextToClipboard">Copied!</button>
                    }
                    else
                    {
                        <button type="button" class="rounded" @onclick="CopyTextToClipboard">Copy</button>
                    }
                </div>
            </div>
        </div>
    }

</div>

@code {

    WordChangeSearchModel searchModel = new WordChangeSearchModel();

    private string? result = null;


    private bool copied = false;
    private int wordCount = 0;
    private int charCount = 0;

    private bool disableSubmit = false;
    private string wordCountColor => wordCount > Helper.TextMaxLength ? "red" : "green";
    private string charCountColor => charCount > Helper.TextAreaMaxLength ? "red" : "green";



    private void Change()
    {
        try
        {
            if (!string.IsNullOrEmpty(searchModel.Content) && !string.IsNullOrEmpty(searchModel.WordWas))
            {
                // Create a regex pattern to match the exact word
                string pattern = $@"\b{Regex.Escape(searchModel.WordWas)}\b";

                if (searchModel.WordWill == null)
                {
                    searchModel.WordWill = "";
                }

                // Replace exact word matches with the desired word
                if (searchModel.CaseSensitive)
                {
                    result = Regex.Replace(searchModel.Content, pattern, searchModel.WordWill);
                }
                else
                {
                    result = Regex.Replace(searchModel.Content, pattern, searchModel.WordWill, RegexOptions.IgnoreCase);
                }

                copied = false;

                if (result == searchModel.Content)
                {
                    result = null;
                    throw new Exception($"Word \"{searchModel.WordWas}\" doesn't exist");
                }
            }
            else
            {
                throw new IOException("Content and WordWas can't be empty");
            }
        }catch(Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        try
        {
            searchModel.Content = e.Value?.ToString();
            wordCount = Helper.CountWords(searchModel.Content);
            charCount = Helper.CountCharacters(searchModel.Content);

            if (wordCount > Helper.TextMaxLength)
            {
                disableSubmit = true;
            }
            else
            {
                disableSubmit = false;
            }
        }
        catch (Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private async Task CopyTextToClipboard()
    {
        try
        {
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("copyToClipboard", result);
                copied = true;
            }
            else
            {
                throw new Exception("Can't copy to clipboard if result is empty");
            }
        }catch(Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }

    private void Clean()
    {
        try
        {
            NavigationManager.NavigateTo("/wordchanger", true);
        }
        catch (Exception ex)
        {
            _errorService.ShowModal(ex.Message);
        }
    }
}