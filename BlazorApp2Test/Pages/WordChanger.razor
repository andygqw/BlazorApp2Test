@page "/wordchanger"

@using BlazorApp2Test.Models;
@using System.Text.RegularExpressions;


@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@inherits Component

<PageTitle>GWTool - Word</PageTitle>


<div class="row px-4">
    <div class="col-12 col-sm-6 col-md-8 py-2">
        <p class="section-name">Word Manipulator</p>
    </div>
</div>

<div class="mx-4 pb-3">
    
    <EditForm Model="@input" OnValidSubmit="@Change">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputTextArea rows="8" class="mb-3 pb-3 form-control rounded bg-light" @bind-Value="input.Content"
                        @oninput="CountWords" placeholder="enter content"></InputTextArea>
        <InputText class="rounded bg-light" @bind-Value="input.WordWas" placeholder="enter changin word" /> 
        <InputText class="rounded bg-light" @bind-Value="input.WordWill" placeholder="enter word going to be" />


        <div class="my-3 form-check form-switch rounded">
            <label class="form-check-label px-2 me-5 move-left rounded bg-light" for="flexSwitchCheckChecked">Case Sensitive</label>
            <input class="form-check-input" type="checkbox" @bind-value="input.caseSensitive" checked>
            <label class="text-success">
                Word Count: @wordCount
            </label>
        </div>

        <button class="rounded" type="submit">Submit</button>

        <button class="rounded" @onclick="Clean">Clear</button>

    </EditForm>


    @if(result != null)
    {
        <div class="mt-4 mb-2 bg-light rounded">

            <div class="px-3 py-2 pt-3">
                <textArea rows="8" class="form-control rounded" readonly type="text" value="@result" />
                <div class="mt-2">
                    @if (copied == true)
                    {
                        <button type="button" class="rounded btn-secondary-active" color="green" @onclick="CopyTextToClipboard">Copied!</button>
                    }
                    else
                    {
                        <button type="button" class="rounded" @onclick="CopyTextToClipboard">Copy</button>
                    }
                </div>
            </div>
        </div>
    }

</div>

@code {

    private WordChangeModel input = new WordChangeModel();

    private string? result;
    private bool copied = false;
    private int wordCount = 0;

    public void Change()
    {
        if(input.Content != null && input.WordWas != null)
        {
            // Create a regex pattern to match the exact word
            string pattern = $@"\b{Regex.Escape(input.WordWas)}\b";

            if (input.WordWill == null)
            {
                input.WordWill = "";
            }

            // Replace exact word matches with the desired word
            if (input.caseSensitive)
            {
                result = Regex.Replace(input.Content, pattern, input.WordWill);
            }
            else
            {
                result = Regex.Replace(input.Content, pattern, input.WordWill, RegexOptions.IgnoreCase);
            }

        }
    }

    public void CountWords(ChangeEventArgs e)
    {
        string value = e.Value.ToString();

        // Trim the input to avoid counting leading/trailing spaces
        var parts = value.Trim();

        // Split the string on whitespace characters and count the words
        wordCount = parts.Split(new char[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Length;

    }

    private async Task CopyTextToClipboard()
    {
        if (result != null)
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", result);
            copied = true;
        }
    }

    private void Clean()
    {
        NavigationManager.NavigateTo("/wordchanger", true);
    }
}