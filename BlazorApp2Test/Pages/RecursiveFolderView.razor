@using BlazorApp2Test.Models
@inject ResourceService _resourceService
@inject ErrorService _errorServive

<Loading IsLoading="@isLoading" />

@if (Folder != null)
{
    <div class="row px-4">
        <div class="col-12 col-sm-6 col-md-8 py-2">
            <div class="section-name">
                @foreach (var path in paths)
                {
                    <div class="link-like" @onclick="() => GoBack(path[1])">@path[0]</div>
                }
            </div>
        </div>
    </div>
    
    <div class="mx-4 pb-3 rounded">
        @foreach (var subFolder in Folder.SubFolders)
        {
            <div class="link-like mb-1" @onclick="() => JumpIn(subFolder.Name)">
                <i class="oi--folder"></i>
                @subFolder.Name
            </div>
        }
        @foreach (var file in Folder.Files)
        {
            <div class="mb-1">
                <i class="oi--file"></i>
                <a href="@file.Url">@file.Name</a>
            </div>
        }
    </div>
}

@code {
    
    [Parameter]
    public FolderItem Folder { get; set; }

    private List<String[]> paths;

    private bool isLoading = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            isLoading = true;
            paths = _resourceService.ParsePrefix(Folder.Name);
        }
        catch (Exception ex)
        {
            _errorServive.ShowModal(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task JumpIn(String subFolderName)
    {
        try
        {
            isLoading = true;
            
            var fullPrefix = $"{Folder.Name}{subFolderName}/";
            Folder = await _resourceService.GetFolderStructureAsync(fullPrefix);
            paths = _resourceService.ParsePrefix(Folder.Name);
        }
        catch (Exception ex)
        {
            _errorServive.ShowModal(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GoBack(String FolderName)
    {
        try
        {
            isLoading = true;
            Console.WriteLine("Go to: " + FolderName);
            Folder = await _resourceService.GetFolderStructureAsync(FolderName);
            paths = _resourceService.ParsePrefix(Folder.Name);
        }
        catch (Exception ex)
        {
            _errorServive.ShowModal(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
}