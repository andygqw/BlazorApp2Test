@using BlazorApp2Test.Models
@inject ResourceService _resourceService
@inject ErrorService _errorServive

<Loading IsLoading="@isLoading" />

@if (Folder != null)
{
    <div class="row px-4">
        <div class="col-12 col-sm-6 col-md-8 py-2">
            <p class="section-name" @onclick="() => GoBack(Folder.Name)">@Folder.Name</p>
        </div>
    </div>
    
    <div class="mx-4 pb-3 rounded">
        @foreach (var subFolder in Folder.SubFolders)
        {
            <div class="link-like mb-1" @onclick="() => JumpIn(subFolder.Name)">
                <i class="oi--folder"></i>
                @subFolder.Name
            </div>
        }
        @foreach (var file in Folder.Files)
        {
            <div class="mb-1">
                <i class="oi--file"></i>
                <a href="@file.Url">@file.Name</a>
            </div>
        }
    </div>
}

@code {
    
    [Parameter]
    public FolderItem Folder { get; set; }

    private bool isLoading = false;

    private async Task JumpIn(String subFolderName)
    {
        try
        {
            isLoading = true;
            
            var fullPrefix = $"{Folder.Name}{subFolderName}/";
            Folder = await _resourceService.GetFolderStructureAsync(fullPrefix);
        }
        catch (Exception ex)
        {
            _errorServive.ShowModal(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GoBack(String FolderName)
    {
        try
        {
            isLoading = true;
            
            String backTrack = String.Empty;

            int lastSlashIndex = FolderName.LastIndexOf('/');
            if (lastSlashIndex >= 0)
            {
                backTrack =  FolderName.Substring(0, lastSlashIndex);
            }
            Console.WriteLine("Check back track: " + backTrack);
            if (string.IsNullOrEmpty(backTrack))
                throw new Exception("Invalid Folder");
            
            Folder = await _resourceService.GetFolderStructureAsync(backTrack);
        }
        catch (Exception ex)
        {
            _errorServive.ShowModal(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
}